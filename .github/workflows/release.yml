name: Release

on:
  push:
    tags:
      - '*'

jobs:
  build-release:
    runs-on: windows-latest

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

    steps:
      - name: Checkout and initialise
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Extract Dalamud version
        id: dalamud-version
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: "./ChatHide/ChatHide.csproj"
          xpath: "//DalamudVersion"

      - name: CSProj Cache
        id: cache-csproj
        uses: actions/cache@v2
        with:
          path: |
            ./dalamud
            ~/.nuget/packages
          key: ${{ runner.os }}-csproj-v3-${{ hashFiles('**/*.csproj') }}

      - name: Setup Dalamud
        if: |
          steps.cache-csproj.outputs.cache-hit != 'true' &&
          steps.dalamud-version.outputs.info != 'dev'
        shell: pwsh
        run: |
          mkdir ./dalamud
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/latest.zip -OutFile ./dalamud/latest.zip
          Expand-Archive -Path ./dalamud/latest.zip ./dalamud

      - name: Setup dev Dalamud
        if: |
          steps.cache-csproj.outputs.cache-hit != 'true' &&
          steps.dalamud-version.outputs.info == 'dev'
        shell: pwsh
        run: |
          mkdir ./dalamud
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile ./dalamud/latest.zip
          Expand-Archive -Path ./dalamud/latest.zip ./dalamud

      - name: Restore project dependencies
        run: dotnet restore --verbosity normal

      - name: Build Release
        run: dotnet build --no-restore --verbosity normal --configuration Release

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ChatHide-release-${{ github.sha }}
          path: |
            ChatHide/bin/x64/Release
            !ChatHide/bin/x64/Release/ChatHide
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ChatHide ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./ChatHide/bin/x64/Release/ChatHide/latest.zip
          asset_name: ChatHide.zip
          asset_content_type: application/zip

      - name: Write out repo.json
        run: |
          $ver = '${{ github.ref }}' -replace 'refs/tags/',''
          $path = './base_repo.json'
          $new_path = './repo.json'
          $content = get-content -path $path
          $content = $content -replace '1.0.0.0',$ver
          set-content -Path $new_path -Value $content
      - name: Commit repo.json
        run: |
          git config --global user.name "Actions User"
          git config --global user.email "actions@github.com"
          git fetch origin main && git checkout main
          git add repo.json
          git commit -m "[CI] Updating repo.json for ${{ github.ref }}" || true
          git push origin main || true